# coding: utf-8

"""

    通过抖音视频id批量获取已分享视频数据信息

    
"""

import pprint
import re  # noqa: F401

import six


class VideoDataResponseDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'title': 'str',
        'create_time': 'int',
        'digg': 'int',
        'play': 'int',
        'forward': 'int',
        'is_reviewed': 'bool'
    }

    attribute_map = {
        'item_id': 'item_id',
        'title': 'title',
        'create_time': 'create_time',
        'digg': 'digg',
        'play': 'play',
        'forward': 'forward',
        'is_reviewed': 'is_reviewed'
    }

    def __init__(self, item_id=None, title=None, create_time=None, digg=None, play=None, forward=None, is_reviewed=None):  # noqa: E501
        """VideoDataResponseDataResponse - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._title = None
        self._create_time = None
        self._digg = None
        self._play = None
        self._forward = None
        self._is_reviewed = None
        self.discriminator = None
        self.item_id = item_id
        self.title = title
        self.create_time = create_time
        self.digg = digg
        self.play = play
        self.forward = forward
        self.is_reviewed = is_reviewed

    @property
    def item_id(self):
        """Gets the item_id of this VideoDataResponseDataResponse.  # noqa: E501

        抖音视频id  # noqa: E501

        :return: The item_id of this VideoDataResponseDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this VideoDataResponseDataResponse.

        抖音视频id  # noqa: E501

        :param item_id: The item_id of this VideoDataResponseDataResponse.  # noqa: E501
        :type: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def title(self):
        """Gets the title of this VideoDataResponseDataResponse.  # noqa: E501

        视频文字  # noqa: E501

        :return: The title of this VideoDataResponseDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VideoDataResponseDataResponse.

        视频文字  # noqa: E501

        :param title: The title of this VideoDataResponseDataResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def create_time(self):
        """Gets the create_time of this VideoDataResponseDataResponse.  # noqa: E501

        视频创建时间戳  # noqa: E501

        :return: The create_time of this VideoDataResponseDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VideoDataResponseDataResponse.

        视频创建时间戳  # noqa: E501

        :param create_time: The create_time of this VideoDataResponseDataResponse.  # noqa: E501
        :type: int
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def digg(self):
        """Gets the digg of this VideoDataResponseDataResponse.  # noqa: E501

        点赞数  # noqa: E501

        :return: The digg of this VideoDataResponseDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._digg

    @digg.setter
    def digg(self, digg):
        """Sets the digg of this VideoDataResponseDataResponse.

        点赞数  # noqa: E501

        :param digg: The digg of this VideoDataResponseDataResponse.  # noqa: E501
        :type: int
        """
        if digg is None:
            raise ValueError("Invalid value for `digg`, must not be `None`")  # noqa: E501

        self._digg = digg

    @property
    def play(self):
        """Gets the play of this VideoDataResponseDataResponse.  # noqa: E501

        播放数  # noqa: E501

        :return: The play of this VideoDataResponseDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._play

    @play.setter
    def play(self, play):
        """Sets the play of this VideoDataResponseDataResponse.

        播放数  # noqa: E501

        :param play: The play of this VideoDataResponseDataResponse.  # noqa: E501
        :type: int
        """
        if play is None:
            raise ValueError("Invalid value for `play`, must not be `None`")  # noqa: E501

        self._play = play

    @property
    def forward(self):
        """Gets the forward of this VideoDataResponseDataResponse.  # noqa: E501

        转发数  # noqa: E501

        :return: The forward of this VideoDataResponseDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._forward

    @forward.setter
    def forward(self, forward):
        """Sets the forward of this VideoDataResponseDataResponse.

        转发数  # noqa: E501

        :param forward: The forward of this VideoDataResponseDataResponse.  # noqa: E501
        :type: int
        """
        if forward is None:
            raise ValueError("Invalid value for `forward`, must not be `None`")  # noqa: E501

        self._forward = forward

    @property
    def is_reviewed(self):
        """Gets the is_reviewed of this VideoDataResponseDataResponse.  # noqa: E501

        是否审核通过  # noqa: E501

        :return: The is_reviewed of this VideoDataResponseDataResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_reviewed

    @is_reviewed.setter
    def is_reviewed(self, is_reviewed):
        """Sets the is_reviewed of this VideoDataResponseDataResponse.

        是否审核通过  # noqa: E501

        :param is_reviewed: The is_reviewed of this VideoDataResponseDataResponse.  # noqa: E501
        :type: bool
        """
        if is_reviewed is None:
            raise ValueError("Invalid value for `is_reviewed`, must not be `None`")  # noqa: E501

        self._is_reviewed = is_reviewed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoDataResponseDataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoDataResponseDataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
