# coding: utf-8

"""

    通过抖音视频id批量获取已分享视频数据信息

    
"""

import pprint
import re  # noqa: F401

import six


class Video(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'title': 'str',
        'cover': 'str',
        'is_top': 'bool',
        'create_time': 'int',
        'is_reviewed': 'bool',
        'share_url': 'str',
        'statistics': 'VideoStatistics'
    }

    attribute_map = {
        'item_id': 'item_id',
        'title': 'title',
        'cover': 'cover',
        'is_top': 'is_top',
        'create_time': 'create_time',
        'is_reviewed': 'is_reviewed',
        'share_url': 'share_url',
        'statistics': 'statistics'
    }

    def __init__(self, item_id=None, title=None, cover=None, is_top=None, create_time=None, is_reviewed=None, share_url=None, statistics=None):  # noqa: E501
        """Video - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._title = None
        self._cover = None
        self._is_top = None
        self._create_time = None
        self._is_reviewed = None
        self._share_url = None
        self._statistics = None
        self.discriminator = None
        self.item_id = item_id
        self.title = title
        self.cover = cover
        self.is_top = is_top
        self.create_time = create_time
        self.is_reviewed = is_reviewed
        self.share_url = share_url
        self.statistics = statistics

    @property
    def item_id(self):
        """Gets the item_id of this Video.  # noqa: E501

        视频id  # noqa: E501

        :return: The item_id of this Video.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Video.

        视频id  # noqa: E501

        :param item_id: The item_id of this Video.  # noqa: E501
        :type: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def title(self):
        """Gets the title of this Video.  # noqa: E501

        视频标题  # noqa: E501

        :return: The title of this Video.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Video.

        视频标题  # noqa: E501

        :param title: The title of this Video.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def cover(self):
        """Gets the cover of this Video.  # noqa: E501

        视频封面  # noqa: E501

        :return: The cover of this Video.  # noqa: E501
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Video.

        视频封面  # noqa: E501

        :param cover: The cover of this Video.  # noqa: E501
        :type: str
        """
        if cover is None:
            raise ValueError("Invalid value for `cover`, must not be `None`")  # noqa: E501

        self._cover = cover

    @property
    def is_top(self):
        """Gets the is_top of this Video.  # noqa: E501

        是否置顶  # noqa: E501

        :return: The is_top of this Video.  # noqa: E501
        :rtype: bool
        """
        return self._is_top

    @is_top.setter
    def is_top(self, is_top):
        """Sets the is_top of this Video.

        是否置顶  # noqa: E501

        :param is_top: The is_top of this Video.  # noqa: E501
        :type: bool
        """
        if is_top is None:
            raise ValueError("Invalid value for `is_top`, must not be `None`")  # noqa: E501

        self._is_top = is_top

    @property
    def create_time(self):
        """Gets the create_time of this Video.  # noqa: E501

        视频创建时间戳  # noqa: E501

        :return: The create_time of this Video.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Video.

        视频创建时间戳  # noqa: E501

        :param create_time: The create_time of this Video.  # noqa: E501
        :type: int
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def is_reviewed(self):
        """Gets the is_reviewed of this Video.  # noqa: E501

        表示是否审核结束。审核通过或者失败都会返回true，审核中返回false。  # noqa: E501

        :return: The is_reviewed of this Video.  # noqa: E501
        :rtype: bool
        """
        return self._is_reviewed

    @is_reviewed.setter
    def is_reviewed(self, is_reviewed):
        """Sets the is_reviewed of this Video.

        表示是否审核结束。审核通过或者失败都会返回true，审核中返回false。  # noqa: E501

        :param is_reviewed: The is_reviewed of this Video.  # noqa: E501
        :type: bool
        """
        if is_reviewed is None:
            raise ValueError("Invalid value for `is_reviewed`, must not be `None`")  # noqa: E501

        self._is_reviewed = is_reviewed

    @property
    def share_url(self):
        """Gets the share_url of this Video.  # noqa: E501

        视频播放页面。视频播放页可能会失效，请在观看视频前调用/video/data/获取最新的播放页。  # noqa: E501

        :return: The share_url of this Video.  # noqa: E501
        :rtype: str
        """
        return self._share_url

    @share_url.setter
    def share_url(self, share_url):
        """Sets the share_url of this Video.

        视频播放页面。视频播放页可能会失效，请在观看视频前调用/video/data/获取最新的播放页。  # noqa: E501

        :param share_url: The share_url of this Video.  # noqa: E501
        :type: str
        """
        if share_url is None:
            raise ValueError("Invalid value for `share_url`, must not be `None`")  # noqa: E501

        self._share_url = share_url

    @property
    def statistics(self):
        """Gets the statistics of this Video.  # noqa: E501


        :return: The statistics of this Video.  # noqa: E501
        :rtype: VideoStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Video.


        :param statistics: The statistics of this Video.  # noqa: E501
        :type: VideoStatistics
        """
        if statistics is None:
            raise ValueError("Invalid value for `statistics`, must not be `None`")  # noqa: E501

        self._statistics = statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Video, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Video):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
