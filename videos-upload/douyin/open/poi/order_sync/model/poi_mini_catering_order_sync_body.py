# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class PoiMiniCateringOrderSyncBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'user_open_id': 'str',
        'ext_user_id': 'str',
        'order_type': 'CateringOrderType',
        'date_time': 'int',
        'order_detail': 'str',
        'ext_shop_info': 'ExtShopInfo'
    }

    attribute_map = {
        'app_id': 'app_id',
        'user_open_id': 'user_open_id',
        'ext_user_id': 'ext_user_id',
        'order_type': 'order_type',
        'date_time': 'date_time',
        'order_detail': 'order_detail',
        'ext_shop_info': 'ext_shop_info'
    }

    def __init__(self, app_id=None, user_open_id=None, ext_user_id=None, order_type=None, date_time=None, order_detail=None, ext_shop_info=None):  # noqa: E501
        """PoiMiniCateringOrderSyncBody - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._user_open_id = None
        self._ext_user_id = None
        self._order_type = None
        self._date_time = None
        self._order_detail = None
        self._ext_shop_info = None
        self.discriminator = None
        self.app_id = app_id
        self.user_open_id = user_open_id
        if ext_user_id is not None:
            self.ext_user_id = ext_user_id
        self.order_type = order_type
        self.date_time = date_time
        self.order_detail = order_detail
        self.ext_shop_info = ext_shop_info

    @property
    def app_id(self):
        """Gets the app_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501

        小程序的appid  # noqa: E501

        :return: The app_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this PoiMiniCateringOrderSyncBody.

        小程序的appid  # noqa: E501

        :param app_id: The app_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :type: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def user_open_id(self):
        """Gets the user_open_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501

        用户的抖音小程序openid  # noqa: E501

        :return: The user_open_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :rtype: str
        """
        return self._user_open_id

    @user_open_id.setter
    def user_open_id(self, user_open_id):
        """Sets the user_open_id of this PoiMiniCateringOrderSyncBody.

        用户的抖音小程序openid  # noqa: E501

        :param user_open_id: The user_open_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :type: str
        """
        if user_open_id is None:
            raise ValueError("Invalid value for `user_open_id`, must not be `None`")  # noqa: E501

        self._user_open_id = user_open_id

    @property
    def ext_user_id(self):
        """Gets the ext_user_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501

        外部用户Id  # noqa: E501

        :return: The ext_user_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :rtype: str
        """
        return self._ext_user_id

    @ext_user_id.setter
    def ext_user_id(self, ext_user_id):
        """Sets the ext_user_id of this PoiMiniCateringOrderSyncBody.

        外部用户Id  # noqa: E501

        :param ext_user_id: The ext_user_id of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :type: str
        """

        self._ext_user_id = ext_user_id

    @property
    def order_type(self):
        """Gets the order_type of this PoiMiniCateringOrderSyncBody.  # noqa: E501


        :return: The order_type of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :rtype: CateringOrderType
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this PoiMiniCateringOrderSyncBody.


        :param order_type: The order_type of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :type: CateringOrderType
        """
        if order_type is None:
            raise ValueError("Invalid value for `order_type`, must not be `None`")  # noqa: E501

        self._order_type = order_type

    @property
    def date_time(self):
        """Gets the date_time of this PoiMiniCateringOrderSyncBody.  # noqa: E501

        发送请求的时间，精确到毫秒  # noqa: E501

        :return: The date_time of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :rtype: int
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this PoiMiniCateringOrderSyncBody.

        发送请求的时间，精确到毫秒  # noqa: E501

        :param date_time: The date_time of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :type: int
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def order_detail(self):
        """Gets the order_detail of this PoiMiniCateringOrderSyncBody.  # noqa: E501

        订单的细节，不同的订单业务有不同的结构体，请具体询问业务方字段结构，参考 $order_menu_detail,$order_queue_detail, $order_book_detail  # noqa: E501

        :return: The order_detail of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :rtype: str
        """
        return self._order_detail

    @order_detail.setter
    def order_detail(self, order_detail):
        """Sets the order_detail of this PoiMiniCateringOrderSyncBody.

        订单的细节，不同的订单业务有不同的结构体，请具体询问业务方字段结构，参考 $order_menu_detail,$order_queue_detail, $order_book_detail  # noqa: E501

        :param order_detail: The order_detail of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :type: str
        """
        if order_detail is None:
            raise ValueError("Invalid value for `order_detail`, must not be `None`")  # noqa: E501

        self._order_detail = order_detail

    @property
    def ext_shop_info(self):
        """Gets the ext_shop_info of this PoiMiniCateringOrderSyncBody.  # noqa: E501


        :return: The ext_shop_info of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :rtype: ExtShopInfo
        """
        return self._ext_shop_info

    @ext_shop_info.setter
    def ext_shop_info(self, ext_shop_info):
        """Sets the ext_shop_info of this PoiMiniCateringOrderSyncBody.


        :param ext_shop_info: The ext_shop_info of this PoiMiniCateringOrderSyncBody.  # noqa: E501
        :type: ExtShopInfo
        """
        if ext_shop_info is None:
            raise ValueError("Invalid value for `ext_shop_info`, must not be `None`")  # noqa: E501

        self._ext_shop_info = ext_shop_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoiMiniCateringOrderSyncBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoiMiniCateringOrderSyncBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
