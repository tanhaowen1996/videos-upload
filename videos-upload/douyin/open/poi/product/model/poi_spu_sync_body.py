# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class PoiSpuSyncBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supplier_ext_id': 'str',
        'spu_ext_id': 'str',
        'spu_type': 'int',
        'status': 'OnlineStatus',
        'name': 'str',
        'order': 'int',
        'description': 'str',
        'attributes': 'SpuAttributes'
    }

    attribute_map = {
        'supplier_ext_id': 'supplier_ext_id',
        'spu_ext_id': 'spu_ext_id',
        'spu_type': 'spu_type',
        'status': 'status',
        'name': 'name',
        'order': 'order',
        'description': 'description',
        'attributes': 'attributes'
    }

    def __init__(self, supplier_ext_id=None, spu_ext_id=None, spu_type=None, status=None, name=None, order=None, description=None, attributes=None):  # noqa: E501
        """PoiSpuSyncBody - a model defined in Swagger"""  # noqa: E501
        self._supplier_ext_id = None
        self._spu_ext_id = None
        self._spu_type = None
        self._status = None
        self._name = None
        self._order = None
        self._description = None
        self._attributes = None
        self.discriminator = None
        self.supplier_ext_id = supplier_ext_id
        self.spu_ext_id = spu_ext_id
        if spu_type is not None:
            self.spu_type = spu_type
        self.status = status
        self.name = name
        if order is not None:
            self.order = order
        if description is not None:
            self.description = description
        self.attributes = attributes

    @property
    def supplier_ext_id(self):
        """Gets the supplier_ext_id of this PoiSpuSyncBody.  # noqa: E501

        接入方店铺ID  # noqa: E501

        :return: The supplier_ext_id of this PoiSpuSyncBody.  # noqa: E501
        :rtype: str
        """
        return self._supplier_ext_id

    @supplier_ext_id.setter
    def supplier_ext_id(self, supplier_ext_id):
        """Sets the supplier_ext_id of this PoiSpuSyncBody.

        接入方店铺ID  # noqa: E501

        :param supplier_ext_id: The supplier_ext_id of this PoiSpuSyncBody.  # noqa: E501
        :type: str
        """
        if supplier_ext_id is None:
            raise ValueError("Invalid value for `supplier_ext_id`, must not be `None`")  # noqa: E501

        self._supplier_ext_id = supplier_ext_id

    @property
    def spu_ext_id(self):
        """Gets the spu_ext_id of this PoiSpuSyncBody.  # noqa: E501

        接入方SPU ID  # noqa: E501

        :return: The spu_ext_id of this PoiSpuSyncBody.  # noqa: E501
        :rtype: str
        """
        return self._spu_ext_id

    @spu_ext_id.setter
    def spu_ext_id(self, spu_ext_id):
        """Sets the spu_ext_id of this PoiSpuSyncBody.

        接入方SPU ID  # noqa: E501

        :param spu_ext_id: The spu_ext_id of this PoiSpuSyncBody.  # noqa: E501
        :type: str
        """
        if spu_ext_id is None:
            raise ValueError("Invalid value for `spu_ext_id`, must not be `None`")  # noqa: E501

        self._spu_ext_id = spu_ext_id

    @property
    def spu_type(self):
        """Gets the spu_type of this PoiSpuSyncBody.  # noqa: E501

        spu类型号，1-酒店民宿，90-景区门票，91-团购券  # noqa: E501

        :return: The spu_type of this PoiSpuSyncBody.  # noqa: E501
        :rtype: int
        """
        return self._spu_type

    @spu_type.setter
    def spu_type(self, spu_type):
        """Sets the spu_type of this PoiSpuSyncBody.

        spu类型号，1-酒店民宿，90-景区门票，91-团购券  # noqa: E501

        :param spu_type: The spu_type of this PoiSpuSyncBody.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 90, 91]  # noqa: E501
        if spu_type not in allowed_values:
            raise ValueError(
                "Invalid value for `spu_type` ({0}), must be one of {1}"  # noqa: E501
                .format(spu_type, allowed_values)
            )

        self._spu_type = spu_type

    @property
    def status(self):
        """Gets the status of this PoiSpuSyncBody.  # noqa: E501


        :return: The status of this PoiSpuSyncBody.  # noqa: E501
        :rtype: OnlineStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PoiSpuSyncBody.


        :param status: The status of this PoiSpuSyncBody.  # noqa: E501
        :type: OnlineStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def name(self):
        """Gets the name of this PoiSpuSyncBody.  # noqa: E501

        SPU名称  # noqa: E501

        :return: The name of this PoiSpuSyncBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PoiSpuSyncBody.

        SPU名称  # noqa: E501

        :param name: The name of this PoiSpuSyncBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def order(self):
        """Gets the order of this PoiSpuSyncBody.  # noqa: E501

        SPU展示顺序,降序  # noqa: E501

        :return: The order of this PoiSpuSyncBody.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PoiSpuSyncBody.

        SPU展示顺序,降序  # noqa: E501

        :param order: The order of this PoiSpuSyncBody.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def description(self):
        """Gets the description of this PoiSpuSyncBody.  # noqa: E501

        SPU描述  # noqa: E501

        :return: The description of this PoiSpuSyncBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PoiSpuSyncBody.

        SPU描述  # noqa: E501

        :param description: The description of this PoiSpuSyncBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def attributes(self):
        """Gets the attributes of this PoiSpuSyncBody.  # noqa: E501


        :return: The attributes of this PoiSpuSyncBody.  # noqa: E501
        :rtype: SpuAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PoiSpuSyncBody.


        :param attributes: The attributes of this PoiSpuSyncBody.  # noqa: E501
        :type: SpuAttributes
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoiSpuSyncBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoiSpuSyncBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
