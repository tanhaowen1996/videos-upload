# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class SyncStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_sync_status': 'int',
        'fail_reason': 'str'
    }

    attribute_map = {
        'last_sync_status': 'last_sync_status',
        'fail_reason': 'fail_reason'
    }

    def __init__(self, last_sync_status=None, fail_reason=None):  # noqa: E501
        """SyncStatus - a model defined in Swagger"""  # noqa: E501
        self._last_sync_status = None
        self._fail_reason = None
        self.discriminator = None
        if last_sync_status is not None:
            self.last_sync_status = last_sync_status
        if fail_reason is not None:
            self.fail_reason = fail_reason

    @property
    def last_sync_status(self):
        """Gets the last_sync_status of this SyncStatus.  # noqa: E501

        最近一次酒店同步状态, 0 - 未处理; 1 - 通过; 2 - 未通过  # noqa: E501

        :return: The last_sync_status of this SyncStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_status

    @last_sync_status.setter
    def last_sync_status(self, last_sync_status):
        """Sets the last_sync_status of this SyncStatus.

        最近一次酒店同步状态, 0 - 未处理; 1 - 通过; 2 - 未通过  # noqa: E501

        :param last_sync_status: The last_sync_status of this SyncStatus.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if last_sync_status not in allowed_values:
            raise ValueError(
                "Invalid value for `last_sync_status` ({0}), must be one of {1}"  # noqa: E501
                .format(last_sync_status, allowed_values)
            )

        self._last_sync_status = last_sync_status

    @property
    def fail_reason(self):
        """Gets the fail_reason of this SyncStatus.  # noqa: E501

        同步失败原因，抖音风控政策问题，该字段无法提供太多信息，目前审核不通过联系抖音运营做进一步处理  # noqa: E501

        :return: The fail_reason of this SyncStatus.  # noqa: E501
        :rtype: str
        """
        return self._fail_reason

    @fail_reason.setter
    def fail_reason(self, fail_reason):
        """Sets the fail_reason of this SyncStatus.

        同步失败原因，抖音风控政策问题，该字段无法提供太多信息，目前审核不通过联系抖音运营做进一步处理  # noqa: E501

        :param fail_reason: The fail_reason of this SyncStatus.  # noqa: E501
        :type: str
        """

        self._fail_reason = fail_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
