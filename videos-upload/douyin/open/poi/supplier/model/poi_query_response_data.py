# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class PoiQueryResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'poi_id': 'str',
        'poi_name': 'str',
        'amap_id': 'str',
        'address': 'str',
        'city': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'error_code': 'ErrorCode',
        'description': 'Description'
    }

    attribute_map = {
        'poi_id': 'poi_id',
        'poi_name': 'poi_name',
        'amap_id': 'amap_id',
        'address': 'address',
        'city': 'city',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'error_code': 'error_code',
        'description': 'description'
    }

    def __init__(self, poi_id=None, poi_name=None, amap_id=None, address=None, city=None, latitude=None, longitude=None, error_code=None, description=None):  # noqa: E501
        """PoiQueryResponseData - a model defined in Swagger"""  # noqa: E501
        self._poi_id = None
        self._poi_name = None
        self._amap_id = None
        self._address = None
        self._city = None
        self._latitude = None
        self._longitude = None
        self._error_code = None
        self._description = None
        self.discriminator = None
        self.poi_id = poi_id
        self.poi_name = poi_name
        self.amap_id = amap_id
        self.address = address
        self.city = city
        self.latitude = latitude
        self.longitude = longitude
        self.error_code = error_code
        self.description = description

    @property
    def poi_id(self):
        """Gets the poi_id of this PoiQueryResponseData.  # noqa: E501

        抖音POI ID  # noqa: E501

        :return: The poi_id of this PoiQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._poi_id

    @poi_id.setter
    def poi_id(self, poi_id):
        """Sets the poi_id of this PoiQueryResponseData.

        抖音POI ID  # noqa: E501

        :param poi_id: The poi_id of this PoiQueryResponseData.  # noqa: E501
        :type: str
        """
        if poi_id is None:
            raise ValueError("Invalid value for `poi_id`, must not be `None`")  # noqa: E501

        self._poi_id = poi_id

    @property
    def poi_name(self):
        """Gets the poi_name of this PoiQueryResponseData.  # noqa: E501

        POI 名称  # noqa: E501

        :return: The poi_name of this PoiQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._poi_name

    @poi_name.setter
    def poi_name(self, poi_name):
        """Sets the poi_name of this PoiQueryResponseData.

        POI 名称  # noqa: E501

        :param poi_name: The poi_name of this PoiQueryResponseData.  # noqa: E501
        :type: str
        """
        if poi_name is None:
            raise ValueError("Invalid value for `poi_name`, must not be `None`")  # noqa: E501

        self._poi_name = poi_name

    @property
    def amap_id(self):
        """Gets the amap_id of this PoiQueryResponseData.  # noqa: E501

        高德POI ID  # noqa: E501

        :return: The amap_id of this PoiQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._amap_id

    @amap_id.setter
    def amap_id(self, amap_id):
        """Sets the amap_id of this PoiQueryResponseData.

        高德POI ID  # noqa: E501

        :param amap_id: The amap_id of this PoiQueryResponseData.  # noqa: E501
        :type: str
        """
        if amap_id is None:
            raise ValueError("Invalid value for `amap_id`, must not be `None`")  # noqa: E501

        self._amap_id = amap_id

    @property
    def address(self):
        """Gets the address of this PoiQueryResponseData.  # noqa: E501

        POI地址  # noqa: E501

        :return: The address of this PoiQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PoiQueryResponseData.

        POI地址  # noqa: E501

        :param address: The address of this PoiQueryResponseData.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def city(self):
        """Gets the city of this PoiQueryResponseData.  # noqa: E501

        POI所在城市  # noqa: E501

        :return: The city of this PoiQueryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PoiQueryResponseData.

        POI所在城市  # noqa: E501

        :param city: The city of this PoiQueryResponseData.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def latitude(self):
        """Gets the latitude of this PoiQueryResponseData.  # noqa: E501

        纬度  # noqa: E501

        :return: The latitude of this PoiQueryResponseData.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PoiQueryResponseData.

        纬度  # noqa: E501

        :param latitude: The latitude of this PoiQueryResponseData.  # noqa: E501
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this PoiQueryResponseData.  # noqa: E501

        经度  # noqa: E501

        :return: The longitude of this PoiQueryResponseData.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PoiQueryResponseData.

        经度  # noqa: E501

        :param longitude: The longitude of this PoiQueryResponseData.  # noqa: E501
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def error_code(self):
        """Gets the error_code of this PoiQueryResponseData.  # noqa: E501


        :return: The error_code of this PoiQueryResponseData.  # noqa: E501
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this PoiQueryResponseData.


        :param error_code: The error_code of this PoiQueryResponseData.  # noqa: E501
        :type: ErrorCode
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def description(self):
        """Gets the description of this PoiQueryResponseData.  # noqa: E501


        :return: The description of this PoiQueryResponseData.  # noqa: E501
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PoiQueryResponseData.


        :param description: The description of this PoiQueryResponseData.  # noqa: E501
        :type: Description
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoiQueryResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoiQueryResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
