# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class SupplierAttributes3101(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'open_time': 'str',
        'open_time_note': 'str',
        'preferential_policy': 'list[SupplierAttributes3101Response]',
        'traffic': 'str',
        'pet': 'int'
    }

    attribute_map = {
        'open_time': 'open_time',
        'open_time_note': 'open_time_note',
        'preferential_policy': 'preferential_policy',
        'traffic': 'traffic',
        'pet': 'pet'
    }

    def __init__(self, open_time=None, open_time_note=None, preferential_policy=None, traffic=None, pet=None):  # noqa: E501
        """SupplierAttributes3101 - a model defined in Swagger"""  # noqa: E501
        self._open_time = None
        self._open_time_note = None
        self._preferential_policy = None
        self._traffic = None
        self._pet = None
        self.discriminator = None
        if open_time is not None:
            self.open_time = open_time
        if open_time_note is not None:
            self.open_time_note = open_time_note
        if preferential_policy is not None:
            self.preferential_policy = preferential_policy
        if traffic is not None:
            self.traffic = traffic
        if pet is not None:
            self.pet = pet

    @property
    def open_time(self):
        """Gets the open_time of this SupplierAttributes3101.  # noqa: E501

        开放时间  # noqa: E501

        :return: The open_time of this SupplierAttributes3101.  # noqa: E501
        :rtype: str
        """
        return self._open_time

    @open_time.setter
    def open_time(self, open_time):
        """Sets the open_time of this SupplierAttributes3101.

        开放时间  # noqa: E501

        :param open_time: The open_time of this SupplierAttributes3101.  # noqa: E501
        :type: str
        """

        self._open_time = open_time

    @property
    def open_time_note(self):
        """Gets the open_time_note of this SupplierAttributes3101.  # noqa: E501

        开放时间-自定义区(不超过200个汉字)  # noqa: E501

        :return: The open_time_note of this SupplierAttributes3101.  # noqa: E501
        :rtype: str
        """
        return self._open_time_note

    @open_time_note.setter
    def open_time_note(self, open_time_note):
        """Sets the open_time_note of this SupplierAttributes3101.

        开放时间-自定义区(不超过200个汉字)  # noqa: E501

        :param open_time_note: The open_time_note of this SupplierAttributes3101.  # noqa: E501
        :type: str
        """

        self._open_time_note = open_time_note

    @property
    def preferential_policy(self):
        """Gets the preferential_policy of this SupplierAttributes3101.  # noqa: E501

        优待政策  # noqa: E501

        :return: The preferential_policy of this SupplierAttributes3101.  # noqa: E501
        :rtype: list[SupplierAttributes3101Response]
        """
        return self._preferential_policy

    @preferential_policy.setter
    def preferential_policy(self, preferential_policy):
        """Sets the preferential_policy of this SupplierAttributes3101.

        优待政策  # noqa: E501

        :param preferential_policy: The preferential_policy of this SupplierAttributes3101.  # noqa: E501
        :type: list[SupplierAttributes3101Response]
        """

        self._preferential_policy = preferential_policy

    @property
    def traffic(self):
        """Gets the traffic of this SupplierAttributes3101.  # noqa: E501

        交通信息(不超过500个汉字)  # noqa: E501

        :return: The traffic of this SupplierAttributes3101.  # noqa: E501
        :rtype: str
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this SupplierAttributes3101.

        交通信息(不超过500个汉字)  # noqa: E501

        :param traffic: The traffic of this SupplierAttributes3101.  # noqa: E501
        :type: str
        """

        self._traffic = traffic

    @property
    def pet(self):
        """Gets the pet of this SupplierAttributes3101.  # noqa: E501

        宠物携带(1:可携带宠物，2:不可携带宠物)  # noqa: E501

        :return: The pet of this SupplierAttributes3101.  # noqa: E501
        :rtype: int
        """
        return self._pet

    @pet.setter
    def pet(self, pet):
        """Sets the pet of this SupplierAttributes3101.

        宠物携带(1:可携带宠物，2:不可携带宠物)  # noqa: E501

        :param pet: The pet of this SupplierAttributes3101.  # noqa: E501
        :type: int
        """

        self._pet = pet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierAttributes3101, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierAttributes3101):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
