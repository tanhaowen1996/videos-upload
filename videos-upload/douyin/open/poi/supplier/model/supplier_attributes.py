# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class SupplierAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_1101': 'list[HotelServiceFacility]',
        '_1102': 'list[HotelServiceFacility]',
        '_1103': 'list[HotelServiceFacility]',
        '_1104': 'SupplierAttributes1104',
        '_1105': 'int',
        '_3101': 'SupplierAttributes3101',
        '_3102': 'str',
        '_3103': 'list[SupplierAttributes3103]',
        '_3104': 'str'
    }

    attribute_map = {
        '_1101': '1101',
        '_1102': '1102',
        '_1103': '1103',
        '_1104': '1104',
        '_1105': '1105',
        '_3101': '3101',
        '_3102': '3102',
        '_3103': '3103',
        '_3104': '3104'
    }

    def __init__(self, _1101=None, _1102=None, _1103=None, _1104=None, _1105=None, _3101=None, _3102=None, _3103=None, _3104=None):  # noqa: E501
        """SupplierAttributes - a model defined in Swagger"""  # noqa: E501
        self.__1101 = None
        self.__1102 = None
        self.__1103 = None
        self.__1104 = None
        self.__1105 = None
        self.__3101 = None
        self.__3102 = None
        self.__3103 = None
        self.__3104 = None
        self.discriminator = None
        if _1101 is not None:
            self._1101 = _1101
        if _1102 is not None:
            self._1102 = _1102
        if _1103 is not None:
            self._1103 = _1103
        if _1104 is not None:
            self._1104 = _1104
        if _1105 is not None:
            self._1105 = _1105
        if _3101 is not None:
            self._3101 = _3101
        if _3102 is not None:
            self._3102 = _3102
        if _3103 is not None:
            self._3103 = _3103
        if _3104 is not None:
            self._3104 = _3104

    @property
    def _1101(self):
        """Gets the _1101 of this SupplierAttributes.  # noqa: E501

        酒店服务  # noqa: E501

        :return: The _1101 of this SupplierAttributes.  # noqa: E501
        :rtype: list[HotelServiceFacility]
        """
        return self.__1101

    @_1101.setter
    def _1101(self, _1101):
        """Sets the _1101 of this SupplierAttributes.

        酒店服务  # noqa: E501

        :param _1101: The _1101 of this SupplierAttributes.  # noqa: E501
        :type: list[HotelServiceFacility]
        """

        self.__1101 = _1101

    @property
    def _1102(self):
        """Gets the _1102 of this SupplierAttributes.  # noqa: E501

        酒店设施  # noqa: E501

        :return: The _1102 of this SupplierAttributes.  # noqa: E501
        :rtype: list[HotelServiceFacility]
        """
        return self.__1102

    @_1102.setter
    def _1102(self, _1102):
        """Sets the _1102 of this SupplierAttributes.

        酒店设施  # noqa: E501

        :param _1102: The _1102 of this SupplierAttributes.  # noqa: E501
        :type: list[HotelServiceFacility]
        """

        self.__1102 = _1102

    @property
    def _1103(self):
        """Gets the _1103 of this SupplierAttributes.  # noqa: E501

        酒店特色项目  # noqa: E501

        :return: The _1103 of this SupplierAttributes.  # noqa: E501
        :rtype: list[HotelServiceFacility]
        """
        return self.__1103

    @_1103.setter
    def _1103(self, _1103):
        """Sets the _1103 of this SupplierAttributes.

        酒店特色项目  # noqa: E501

        :param _1103: The _1103 of this SupplierAttributes.  # noqa: E501
        :type: list[HotelServiceFacility]
        """

        self.__1103 = _1103

    @property
    def _1104(self):
        """Gets the _1104 of this SupplierAttributes.  # noqa: E501


        :return: The _1104 of this SupplierAttributes.  # noqa: E501
        :rtype: SupplierAttributes1104
        """
        return self.__1104

    @_1104.setter
    def _1104(self, _1104):
        """Sets the _1104 of this SupplierAttributes.


        :param _1104: The _1104 of this SupplierAttributes.  # noqa: E501
        :type: SupplierAttributes1104
        """

        self.__1104 = _1104

    @property
    def _1105(self):
        """Gets the _1105 of this SupplierAttributes.  # noqa: E501

        下单模板。1 - 国内模板, 2 - 海外模板  # noqa: E501

        :return: The _1105 of this SupplierAttributes.  # noqa: E501
        :rtype: int
        """
        return self.__1105

    @_1105.setter
    def _1105(self, _1105):
        """Sets the _1105 of this SupplierAttributes.

        下单模板。1 - 国内模板, 2 - 海外模板  # noqa: E501

        :param _1105: The _1105 of this SupplierAttributes.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if _1105 not in allowed_values:
            raise ValueError(
                "Invalid value for `_1105` ({0}), must be one of {1}"  # noqa: E501
                .format(_1105, allowed_values)
            )

        self.__1105 = _1105

    @property
    def _3101(self):
        """Gets the _3101 of this SupplierAttributes.  # noqa: E501


        :return: The _3101 of this SupplierAttributes.  # noqa: E501
        :rtype: SupplierAttributes3101
        """
        return self.__3101

    @_3101.setter
    def _3101(self, _3101):
        """Sets the _3101 of this SupplierAttributes.


        :param _3101: The _3101 of this SupplierAttributes.  # noqa: E501
        :type: SupplierAttributes3101
        """

        self.__3101 = _3101

    @property
    def _3102(self):
        """Gets the _3102 of this SupplierAttributes.  # noqa: E501

        玩法介绍(不超过500个汉字)  # noqa: E501

        :return: The _3102 of this SupplierAttributes.  # noqa: E501
        :rtype: str
        """
        return self.__3102

    @_3102.setter
    def _3102(self, _3102):
        """Sets the _3102 of this SupplierAttributes.

        玩法介绍(不超过500个汉字)  # noqa: E501

        :param _3102: The _3102 of this SupplierAttributes.  # noqa: E501
        :type: str
        """

        self.__3102 = _3102

    @property
    def _3103(self):
        """Gets the _3103 of this SupplierAttributes.  # noqa: E501

        服务设施列表  # noqa: E501

        :return: The _3103 of this SupplierAttributes.  # noqa: E501
        :rtype: list[SupplierAttributes3103]
        """
        return self.__3103

    @_3103.setter
    def _3103(self, _3103):
        """Sets the _3103 of this SupplierAttributes.

        服务设施列表  # noqa: E501

        :param _3103: The _3103 of this SupplierAttributes.  # noqa: E501
        :type: list[SupplierAttributes3103]
        """

        self.__3103 = _3103

    @property
    def _3104(self):
        """Gets the _3104 of this SupplierAttributes.  # noqa: E501

        景点介绍(不超过1000个汉字)  # noqa: E501

        :return: The _3104 of this SupplierAttributes.  # noqa: E501
        :rtype: str
        """
        return self.__3104

    @_3104.setter
    def _3104(self, _3104):
        """Sets the _3104 of this SupplierAttributes.

        景点介绍(不超过1000个汉字)  # noqa: E501

        :param _3104: The _3104 of this SupplierAttributes.  # noqa: E501
        :type: str
        """

        self.__3104 = _3104

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
