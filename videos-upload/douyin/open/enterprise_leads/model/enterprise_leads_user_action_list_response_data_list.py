# coding: utf-8

"""
    企业号意向用户管理

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class EnterpriseLeadsUserActionListResponseDataList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'int',
        'user_id': 'str',
        'action_source': 'str',
        'action_flag': 'int',
        'create_time': 'int'
    }

    attribute_map = {
        'action_type': 'action_type',
        'user_id': 'user_id',
        'action_source': 'action_source',
        'action_flag': 'action_flag',
        'create_time': 'create_time'
    }

    def __init__(self, action_type=None, user_id=None, action_source=None, action_flag=None, create_time=None):  # noqa: E501
        """EnterpriseLeadsUserActionListResponseDataList - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._user_id = None
        self._action_source = None
        self._action_flag = None
        self._create_time = None
        self.discriminator = None
        self.action_type = action_type
        self.user_id = user_id
        if action_source is not None:
            self.action_source = action_source
        if action_flag is not None:
            self.action_flag = action_flag
        self.create_time = create_time

    @property
    def action_type(self):
        """Gets the action_type of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501

        分类   * `0` - 全部   * `1` - 私信互动   * `2` - 组件互动   * `3` - 主页互动   # noqa: E501

        :return: The action_type of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :rtype: int
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this EnterpriseLeadsUserActionListResponseDataList.

        分类   * `0` - 全部   * `1` - 私信互动   * `2` - 组件互动   * `3` - 主页互动   # noqa: E501

        :param action_type: The action_type of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :type: int
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def user_id(self):
        """Gets the user_id of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501


        :return: The user_id of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EnterpriseLeadsUserActionListResponseDataList.


        :param user_id: The user_id of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def action_source(self):
        """Gets the action_source of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501


        :return: The action_source of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :rtype: str
        """
        return self._action_source

    @action_source.setter
    def action_source(self, action_source):
        """Sets the action_source of this EnterpriseLeadsUserActionListResponseDataList.


        :param action_source: The action_source of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :type: str
        """

        self._action_source = action_source

    @property
    def action_flag(self):
        """Gets the action_flag of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501


        :return: The action_flag of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :rtype: int
        """
        return self._action_flag

    @action_flag.setter
    def action_flag(self, action_flag):
        """Sets the action_flag of this EnterpriseLeadsUserActionListResponseDataList.


        :param action_flag: The action_flag of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :type: int
        """

        self._action_flag = action_flag

    @property
    def create_time(self):
        """Gets the create_time of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501


        :return: The create_time of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this EnterpriseLeadsUserActionListResponseDataList.


        :param create_time: The create_time of this EnterpriseLeadsUserActionListResponseDataList.  # noqa: E501
        :type: int
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnterpriseLeadsUserActionListResponseDataList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnterpriseLeadsUserActionListResponseDataList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
