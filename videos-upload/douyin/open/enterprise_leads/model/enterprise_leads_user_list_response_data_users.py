# coding: utf-8

"""
    企业号意向用户管理

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class EnterpriseLeadsUserListResponseDataUsers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'open_id': 'str',
        'nickname': 'str',
        'avatar': 'str',
        'telephone': 'str',
        'wechat': 'str',
        'city': 'str',
        'gender': 'int',
        'age': 'int',
        'leads_level': 'int',
        'tag_list': 'list[EnterpriseLeadsUserListResponseDataResponse]',
        'is_follow': 'bool'
    }

    attribute_map = {
        'open_id': 'open_id',
        'nickname': 'nickname',
        'avatar': 'avatar',
        'telephone': 'telephone',
        'wechat': 'wechat',
        'city': 'city',
        'gender': 'gender',
        'age': 'age',
        'leads_level': 'leads_level',
        'tag_list': 'tag_list',
        'is_follow': 'is_follow'
    }

    def __init__(self, open_id=None, nickname=None, avatar=None, telephone=None, wechat=None, city=None, gender=None, age=None, leads_level=None, tag_list=None, is_follow=None):  # noqa: E501
        """EnterpriseLeadsUserListResponseDataUsers - a model defined in Swagger"""  # noqa: E501
        self._open_id = None
        self._nickname = None
        self._avatar = None
        self._telephone = None
        self._wechat = None
        self._city = None
        self._gender = None
        self._age = None
        self._leads_level = None
        self._tag_list = None
        self._is_follow = None
        self.discriminator = None
        if open_id is not None:
            self.open_id = open_id
        if nickname is not None:
            self.nickname = nickname
        if avatar is not None:
            self.avatar = avatar
        if telephone is not None:
            self.telephone = telephone
        if wechat is not None:
            self.wechat = wechat
        if city is not None:
            self.city = city
        if gender is not None:
            self.gender = gender
        if age is not None:
            self.age = age
        if leads_level is not None:
            self.leads_level = leads_level
        if tag_list is not None:
            self.tag_list = tag_list
        if is_follow is not None:
            self.is_follow = is_follow

    @property
    def open_id(self):
        """Gets the open_id of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501

        用户在当前应用的唯一标识  # noqa: E501

        :return: The open_id of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: str
        """
        return self._open_id

    @open_id.setter
    def open_id(self, open_id):
        """Sets the open_id of this EnterpriseLeadsUserListResponseDataUsers.

        用户在当前应用的唯一标识  # noqa: E501

        :param open_id: The open_id of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: str
        """

        self._open_id = open_id

    @property
    def nickname(self):
        """Gets the nickname of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501


        :return: The nickname of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this EnterpriseLeadsUserListResponseDataUsers.


        :param nickname: The nickname of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def avatar(self):
        """Gets the avatar of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501


        :return: The avatar of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this EnterpriseLeadsUserListResponseDataUsers.


        :param avatar: The avatar of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def telephone(self):
        """Gets the telephone of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501


        :return: The telephone of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this EnterpriseLeadsUserListResponseDataUsers.


        :param telephone: The telephone of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def wechat(self):
        """Gets the wechat of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501


        :return: The wechat of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: str
        """
        return self._wechat

    @wechat.setter
    def wechat(self, wechat):
        """Sets the wechat of this EnterpriseLeadsUserListResponseDataUsers.


        :param wechat: The wechat of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: str
        """

        self._wechat = wechat

    @property
    def city(self):
        """Gets the city of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501


        :return: The city of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EnterpriseLeadsUserListResponseDataUsers.


        :param city: The city of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def gender(self):
        """Gets the gender of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501

        性别 * `0` - 未知 * `1` - 男 * `2` - 女   # noqa: E501

        :return: The gender of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this EnterpriseLeadsUserListResponseDataUsers.

        性别 * `0` - 未知 * `1` - 男 * `2` - 女   # noqa: E501

        :param gender: The gender of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def age(self):
        """Gets the age of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501


        :return: The age of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this EnterpriseLeadsUserListResponseDataUsers.


        :param age: The age of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def leads_level(self):
        """Gets the leads_level of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501

        用户状态 * `-1` - 没兴趣 * `0` - 了解 * `1` - 有兴趣 * `2` - 有意愿 * `10` - 已转化   # noqa: E501

        :return: The leads_level of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: int
        """
        return self._leads_level

    @leads_level.setter
    def leads_level(self, leads_level):
        """Sets the leads_level of this EnterpriseLeadsUserListResponseDataUsers.

        用户状态 * `-1` - 没兴趣 * `0` - 了解 * `1` - 有兴趣 * `2` - 有意愿 * `10` - 已转化   # noqa: E501

        :param leads_level: The leads_level of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: int
        """
        allowed_values = [-1, 0, 1, 2, 10]  # noqa: E501
        if leads_level not in allowed_values:
            raise ValueError(
                "Invalid value for `leads_level` ({0}), must be one of {1}"  # noqa: E501
                .format(leads_level, allowed_values)
            )

        self._leads_level = leads_level

    @property
    def tag_list(self):
        """Gets the tag_list of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501

        绑定的标签列表  # noqa: E501

        :return: The tag_list of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: list[EnterpriseLeadsUserListResponseDataResponse]
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this EnterpriseLeadsUserListResponseDataUsers.

        绑定的标签列表  # noqa: E501

        :param tag_list: The tag_list of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: list[EnterpriseLeadsUserListResponseDataResponse]
        """

        self._tag_list = tag_list

    @property
    def is_follow(self):
        """Gets the is_follow of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501

        当前指定用户是否已关注本企业号  # noqa: E501

        :return: The is_follow of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :rtype: bool
        """
        return self._is_follow

    @is_follow.setter
    def is_follow(self, is_follow):
        """Sets the is_follow of this EnterpriseLeadsUserListResponseDataUsers.

        当前指定用户是否已关注本企业号  # noqa: E501

        :param is_follow: The is_follow of this EnterpriseLeadsUserListResponseDataUsers.  # noqa: E501
        :type: bool
        """

        self._is_follow = is_follow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnterpriseLeadsUserListResponseDataUsers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnterpriseLeadsUserListResponseDataUsers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
