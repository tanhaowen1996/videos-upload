# coding: utf-8

"""

    获取用户的粉丝数据

    
"""

import pprint
import re  # noqa: F401

import six


class FansProfileFlowContribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flow': 'str',
        'fans_sum': 'int',
        'all_sum': 'int'
    }

    attribute_map = {
        'flow': 'flow',
        'fans_sum': 'fans_sum',
        'all_sum': 'all_sum'
    }

    def __init__(self, flow=None, fans_sum=None, all_sum=None):  # noqa: E501
        """FansProfileFlowContribution - a model defined in Swagger"""  # noqa: E501
        self._flow = None
        self._fans_sum = None
        self._all_sum = None
        self.discriminator = None
        self.flow = flow
        self.fans_sum = fans_sum
        self.all_sum = all_sum

    @property
    def flow(self):
        """Gets the flow of this FansProfileFlowContribution.  # noqa: E501

        流量贡献种类  # noqa: E501

        :return: The flow of this FansProfileFlowContribution.  # noqa: E501
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this FansProfileFlowContribution.

        流量贡献种类  # noqa: E501

        :param flow: The flow of this FansProfileFlowContribution.  # noqa: E501
        :type: str
        """
        if flow is None:
            raise ValueError("Invalid value for `flow`, must not be `None`")  # noqa: E501

        self._flow = flow

    @property
    def fans_sum(self):
        """Gets the fans_sum of this FansProfileFlowContribution.  # noqa: E501

        粉丝流量贡献  # noqa: E501

        :return: The fans_sum of this FansProfileFlowContribution.  # noqa: E501
        :rtype: int
        """
        return self._fans_sum

    @fans_sum.setter
    def fans_sum(self, fans_sum):
        """Sets the fans_sum of this FansProfileFlowContribution.

        粉丝流量贡献  # noqa: E501

        :param fans_sum: The fans_sum of this FansProfileFlowContribution.  # noqa: E501
        :type: int
        """
        if fans_sum is None:
            raise ValueError("Invalid value for `fans_sum`, must not be `None`")  # noqa: E501

        self._fans_sum = fans_sum

    @property
    def all_sum(self):
        """Gets the all_sum of this FansProfileFlowContribution.  # noqa: E501

        总流量贡献  # noqa: E501

        :return: The all_sum of this FansProfileFlowContribution.  # noqa: E501
        :rtype: int
        """
        return self._all_sum

    @all_sum.setter
    def all_sum(self, all_sum):
        """Sets the all_sum of this FansProfileFlowContribution.

        总流量贡献  # noqa: E501

        :param all_sum: The all_sum of this FansProfileFlowContribution.  # noqa: E501
        :type: int
        """
        if all_sum is None:
            raise ValueError("Invalid value for `all_sum`, must not be `None`")  # noqa: E501

        self._all_sum = all_sum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FansProfileFlowContribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FansProfileFlowContribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
