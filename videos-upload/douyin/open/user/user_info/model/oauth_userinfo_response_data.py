# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class OauthUserinfoResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'ErrorCode',
        'description': 'Description',
        'open_id': 'str',
        'union_id': 'str',
        'nickname': 'str',
        'avatar': 'str',
        'city': 'str',
        'province': 'str',
        'country': 'str',
        'gender': 'int',
        'e_account_role': 'str'
    }

    attribute_map = {
        'error_code': 'error_code',
        'description': 'description',
        'open_id': 'open_id',
        'union_id': 'union_id',
        'nickname': 'nickname',
        'avatar': 'avatar',
        'city': 'city',
        'province': 'province',
        'country': 'country',
        'gender': 'gender',
        'e_account_role': 'e_account_role'
    }

    def __init__(self, error_code=None, description=None, open_id=None, union_id=None, nickname=None, avatar=None, city=None, province=None, country=None, gender=None, e_account_role=None):  # noqa: E501
        """OauthUserinfoResponseData - a model defined in Swagger"""  # noqa: E501
        self._error_code = None
        self._description = None
        self._open_id = None
        self._union_id = None
        self._nickname = None
        self._avatar = None
        self._city = None
        self._province = None
        self._country = None
        self._gender = None
        self._e_account_role = None
        self.discriminator = None
        if error_code is not None:
            self.error_code = error_code
        if description is not None:
            self.description = description
        if open_id is not None:
            self.open_id = open_id
        if union_id is not None:
            self.union_id = union_id
        if nickname is not None:
            self.nickname = nickname
        if avatar is not None:
            self.avatar = avatar
        if city is not None:
            self.city = city
        if province is not None:
            self.province = province
        if country is not None:
            self.country = country
        if gender is not None:
            self.gender = gender
        if e_account_role is not None:
            self.e_account_role = e_account_role

    @property
    def error_code(self):
        """Gets the error_code of this OauthUserinfoResponseData.  # noqa: E501


        :return: The error_code of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this OauthUserinfoResponseData.


        :param error_code: The error_code of this OauthUserinfoResponseData.  # noqa: E501
        :type: ErrorCode
        """

        self._error_code = error_code

    @property
    def description(self):
        """Gets the description of this OauthUserinfoResponseData.  # noqa: E501


        :return: The description of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OauthUserinfoResponseData.


        :param description: The description of this OauthUserinfoResponseData.  # noqa: E501
        :type: Description
        """

        self._description = description

    @property
    def open_id(self):
        """Gets the open_id of this OauthUserinfoResponseData.  # noqa: E501

        用户在当前应用的唯一标识  # noqa: E501

        :return: The open_id of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._open_id

    @open_id.setter
    def open_id(self, open_id):
        """Sets the open_id of this OauthUserinfoResponseData.

        用户在当前应用的唯一标识  # noqa: E501

        :param open_id: The open_id of this OauthUserinfoResponseData.  # noqa: E501
        :type: str
        """

        self._open_id = open_id

    @property
    def union_id(self):
        """Gets the union_id of this OauthUserinfoResponseData.  # noqa: E501

        用户在当前开发者账号下的唯一标识（未绑定开发者账号没有该字段）  # noqa: E501

        :return: The union_id of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._union_id

    @union_id.setter
    def union_id(self, union_id):
        """Sets the union_id of this OauthUserinfoResponseData.

        用户在当前开发者账号下的唯一标识（未绑定开发者账号没有该字段）  # noqa: E501

        :param union_id: The union_id of this OauthUserinfoResponseData.  # noqa: E501
        :type: str
        """

        self._union_id = union_id

    @property
    def nickname(self):
        """Gets the nickname of this OauthUserinfoResponseData.  # noqa: E501


        :return: The nickname of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this OauthUserinfoResponseData.


        :param nickname: The nickname of this OauthUserinfoResponseData.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def avatar(self):
        """Gets the avatar of this OauthUserinfoResponseData.  # noqa: E501


        :return: The avatar of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this OauthUserinfoResponseData.


        :param avatar: The avatar of this OauthUserinfoResponseData.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def city(self):
        """Gets the city of this OauthUserinfoResponseData.  # noqa: E501


        :return: The city of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OauthUserinfoResponseData.


        :param city: The city of this OauthUserinfoResponseData.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def province(self):
        """Gets the province of this OauthUserinfoResponseData.  # noqa: E501


        :return: The province of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this OauthUserinfoResponseData.


        :param province: The province of this OauthUserinfoResponseData.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def country(self):
        """Gets the country of this OauthUserinfoResponseData.  # noqa: E501


        :return: The country of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this OauthUserinfoResponseData.


        :param country: The country of this OauthUserinfoResponseData.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def gender(self):
        """Gets the gender of this OauthUserinfoResponseData.  # noqa: E501

        性别:   * `0` - 未知   * `1` - 男性   * `2` - 女性   # noqa: E501

        :return: The gender of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this OauthUserinfoResponseData.

        性别:   * `0` - 未知   * `1` - 男性   * `2` - 女性   # noqa: E501

        :param gender: The gender of this OauthUserinfoResponseData.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def e_account_role(self):
        """Gets the e_account_role of this OauthUserinfoResponseData.  # noqa: E501

        类型:   * `EAccountM` - 普通企业号   * `EAccountS` - 认证企业号   * `EAccountK` - 品牌企业号   # noqa: E501

        :return: The e_account_role of this OauthUserinfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._e_account_role

    @e_account_role.setter
    def e_account_role(self, e_account_role):
        """Sets the e_account_role of this OauthUserinfoResponseData.

        类型:   * `EAccountM` - 普通企业号   * `EAccountS` - 认证企业号   * `EAccountK` - 品牌企业号   # noqa: E501

        :param e_account_role: The e_account_role of this OauthUserinfoResponseData.  # noqa: E501
        :type: str
        """
        allowed_values = ["EAccountM", "EAccountS", "EAccountK"]  # noqa: E501
        if e_account_role and e_account_role not in allowed_values:
            raise ValueError(
                "Invalid value for `e_account_role` ({0}), must be one of {1}"  # noqa: E501
                .format(e_account_role, allowed_values)
            )

        self._e_account_role = e_account_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OauthUserinfoResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OauthUserinfoResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
