# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
"""

import pprint
import re  # noqa: F401

import six


class VideoCommentTopBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'comment_id': 'str',
        'top': 'bool'
    }

    attribute_map = {
        'item_id': 'item_id',
        'comment_id': 'comment_id',
        'top': 'top'
    }

    def __init__(self, item_id=None, comment_id=None, top=None):  # noqa: E501
        """VideoCommentTopBody - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._comment_id = None
        self._top = None
        self.discriminator = None
        self.item_id = item_id
        self.comment_id = comment_id
        self.top = top

    @property
    def item_id(self):
        """Gets the item_id of this VideoCommentTopBody.  # noqa: E501

        视频id  # noqa: E501

        :return: The item_id of this VideoCommentTopBody.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this VideoCommentTopBody.

        视频id  # noqa: E501

        :param item_id: The item_id of this VideoCommentTopBody.  # noqa: E501
        :type: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def comment_id(self):
        """Gets the comment_id of this VideoCommentTopBody.  # noqa: E501

        需要回复的评论id  # noqa: E501

        :return: The comment_id of this VideoCommentTopBody.  # noqa: E501
        :rtype: str
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this VideoCommentTopBody.

        需要回复的评论id  # noqa: E501

        :param comment_id: The comment_id of this VideoCommentTopBody.  # noqa: E501
        :type: str
        """
        if comment_id is None:
            raise ValueError("Invalid value for `comment_id`, must not be `None`")  # noqa: E501

        self._comment_id = comment_id

    @property
    def top(self):
        """Gets the top of this VideoCommentTopBody.  # noqa: E501

        true: 置顶, false: 取消置顶  # noqa: E501

        :return: The top of this VideoCommentTopBody.  # noqa: E501
        :rtype: bool
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this VideoCommentTopBody.

        true: 置顶, false: 取消置顶  # noqa: E501

        :param top: The top of this VideoCommentTopBody.  # noqa: E501
        :type: bool
        """
        if top is None:
            raise ValueError("Invalid value for `top`, must not be `None`")  # noqa: E501

        self._top = top

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoCommentTopBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoCommentTopBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
